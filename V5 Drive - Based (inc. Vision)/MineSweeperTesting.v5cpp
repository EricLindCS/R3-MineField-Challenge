{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor29 Motor393A = motor29(Brain.ThreeWirePort.A, true);\nmotor29 Motor393B = motor29(Brain.ThreeWirePort.B, false);\ncontroller Controller1 = controller(primary);\nmotor Motor1 = motor(PORT1, ratio36_1, true);\n\n/*vex-vision-config:begin*/\nvision::signature POLE = vision::signature (1, 355, 639, 496,-3865, -3355, -3610,2.6, 0);\nvision Vision2 = vision (PORT2, 81, POLE);\n/*vex-vision-config:end*/\nmotor LeftDriveSmart = motor(PORT3, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT4, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Eric Lind                                                  */\n/*    Created:      4/10/23                                                   */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid DriveFW(double x, double y){\n  Drivetrain.driveFor(forward, y * x, mm);\n}\n\nvoid Align(){\n  //Update vision snapshot for initial measurement\n   Vision2.takeSnapshot(POLE);\n\n   //Get detla by subtracting numpixels/2 from reading\n    double tx = Vision2.largestObject.centerX - 150;\n\n    //arbitray testing value\n    int per = 350;\n    int tr = 3;\n\n    //align loop \n    /*\n    while (tx > 8 || tx < -8){\n      Vision2.takeSnapshot(POLE);\n      double tx = Vision2.largestObject.centerX - 150;\n     \n        Drivetrain.turnFor(left, tx/100 * tr, degrees);\n\n      Vision2.takeSnapshot(POLE);\n    } \n    */\n\n    while (tx > 8 || tx < -8){\n    Vision2.takeSnapshot(Vision2__POLE); //Take a picture\n    err=160-Vision2.largestObject.centerX; //160 is my desired value.\n    speed=err-lasterr; lasterr=err;\n    pidout=err*.08+speed*.12; //I directly set my kp and kd without variables for brevity.\n    if (!Vision2.largestObject.exists) {pidout=0;} //zero out my pid if I am not holding the \"PID\" button (X), or if it doesn't see an object.\n    drive=Controller1.Axis3.position()*.12\n    turn=Controller1.Axis1.position()*.12 - pidout; //add pidout, though I subtract since otherwise the robot would turn the wrong way\n    Motor3.spin(forward,drive-turn,volt);\n    rightWheels.spin(forward,drive-turn,volt);\n    }\n    \n}\n\nvoid FullAlign(){\n   Vision2.takeSnapshot(POLE);\n    while (Vision2.largestObject.width>30 || Vision2.largestObject.width < 25) {\n      bool xdev = false;\n      bool a = false;\n      for (int i = 0; i < 4; i++){\n      Vision2.takeSnapshot(POLE);\n        if (Vision2.largestObject.exists){\n          a = (Vision2.largestObject.width > 30);\n        }\n        if (a != xdev){\n          if (a) {\n            xdev = a;\n          }\n        }\n        wait(0.08, seconds);\n      }\n      int dir = xdev;\n\n      DriveFW(-1, 1);\n      }\n      \n        Align();\n        wait(1, seconds);\n          \n}\n\n\n\n\nint main() {\n\n  Motor1.setStopping(brake);\n  \n  Motor1.spinToPosition(0,degrees);\n  while(0==0){\n\n    // ****PRINTSCRN DEBUG CODE GOES HERE**** //\n    Vision2.takeSnapshot(POLE);\n    Controller1.Screen.print(Vision2.largestObject.width);\n    Controller1.Screen.newLine();\n    // ****PRINTSCRN DEBUG CODE ENDS HERE**** //\n\n    if (Controller1.ButtonX.pressing()){\n      Motor1.setPosition(0, degrees);\n    }\n    if(Controller1.ButtonR1.pressing() && Motor1.position(degrees) < 215){\n    Motor1.spin(forward, 50, percent);\n    }\n    else if(Controller1.ButtonR2.pressing() && Motor1.position(degrees) > -547) {\n    Motor1.spin(reverse, 50, percent);\n    }\n    else if (Controller1.ButtonDown.pressing()){\n    Motor1.spinToPosition(-547, degrees);\n    }\n    else if (Controller1.ButtonLeft.pressing()){\n    Motor1.spinToPosition(-464, degrees);\n    }\n    else if (Controller1.ButtonUp.pressing()){\n    Motor1.spinToPosition(0, degrees);    \n    }\n    else if (Controller1.ButtonRight.pressing()){\n    Motor1.spinToPosition(215, degrees);    \n    }\n    else {\n    Motor1.stop();\n    }\n\n    if (Controller1.ButtonB.pressing()) \n      {\n       Align();\n      }\n      if (Controller1.ButtonY.pressing()){\n      FullAlign();\n      }\n      if (Controller1.ButtonL1.pressing()){\n      FullAlign();\n      Motor1.spinToPosition(-464, degrees, true);\n      Brain.Screen.print(\"Aligned\");\n      double t = 0.45;\n      DriveFW(t, 1);\n      Motor1.spinToPosition(0, degrees); \n      }\n\n\n  } // end drive loop\n} // end main\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Motor393A","customName":false,"deviceType":"Motor393","deviceClass":"motor29","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"Motor393B","customName":false,"deviceType":"Motor393","deviceClass":"motor29","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"Vision2","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":81,\"signatures\":[{\"name\":\"POLE\",\"parameters\":{\"uMin\":355,\"uMax\":639,\"uMean\":496,\"vMin\":-3865,\"vMax\":-3355,\"vMean\":-3610,\"rgb\":1,\"type\":0,\"name\":\"POLE\"},\"range\":2.6},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[3,4,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"}}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}