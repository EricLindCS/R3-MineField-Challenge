{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_control_forever\" id=\"Z3E~*h4$|n?,Q+?/yUgN\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then_else\" id=\"Dx~@SU5o%[V4.:kgY7py\"><value name=\"CONDITION\"><block type=\"v5_operator_or\" id=\"oM$j)c9N!v@D``+zsrLA\"><value name=\"OPERAND1\"><block type=\"v5_operator_greater_than\" id=\"/v1X}-eMK?oN6u+brI]t\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"+]1DY6%/[^b]woZOyHXU\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"jdudQPfnToBK-M}DQr`B\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis1</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"1+38xwJ0/+7D-yH_.)6_\"><field name=\"NUM\">5</field></shadow></value></block></value><value name=\"OPERAND2\"><block type=\"v5_operator_less_than\" id=\"zM6BjI*MTKbKxD*Z?hI:\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"Pz:stSl-NLEg,b72*~Zx\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"o;Ki)=Ckh1S;%oLK}Tmw\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis1</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\";}[(5dTltzt!Nwua_Q:!\"><field name=\"NUM\">-5</field></shadow></value></block></value></block></value></block></statement></block></next></block><block type=\"v5_events_when_started\" id=\"BjfNFD^Fk{@Z{1hOS1|w\" x=\"70\" y=\"470\"><next><block type=\"v5_control_forever\" id=\"oE9XNVd}wTZJIV(2kq{C\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then\" id=\"}]pkj_DR4ML*`8h=9Ewy\"></block></statement></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1,2,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"}},{"port":[3],"name":"Motor3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor Motor3 = motor(PORT3, ratio18_1, false);\n\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    if (Controller1.Axis1.position() > 5.0 || Controller1.Axis1.position() < -5.0) {\n    }\n    else {\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  while (true) {\n    if (false) {\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}