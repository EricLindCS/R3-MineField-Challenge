{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor29 Motor393A = motor29(Brain.ThreeWirePort.A, true);\nmotor29 Motor393B = motor29(Brain.ThreeWirePort.B, false);\ncontroller Controller1 = controller(primary);\nmotor Motor1 = motor(PORT1, ratio36_1, true);\n\n/*vex-vision-config:begin*/\nvision::signature POLE (1, 355, 639, 496, -3865, -3355, -3610, 4.200, 0);\nvision::signature SIG_2 (2, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvision::signature SIG_3 (3, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvision::signature SIG_4 (4, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvision::signature SIG_5 (5, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvision::signature SIG_6 (6, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvision::signature SIG_7 (7, 0, 0, 0, 0, 0, 0, 2.500, 0);\nvex::vision vision1 ( vex::PORT2, 68, POLE, SIG_2, SIG_3, SIG_4, SIG_5, SIG_6, SIG_7 );\n/*vex-vision-config:end*/\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\n\nvoid Align(){\n  //Update vision snapshot for initial measurement\n   vision1.takeSnapshot(POLE);\n\n   //Get detla by subtracting numpixels/2 from reading\n    double tx = vision1.largestObject.centerX - 150;\n    double ty = vision1.largestObject.centerY - 150;\n\n    //arbitray testing value\n    int per = 350;\n\n    //align loop (using 393 so its pretty bad)\n    while (tx > 10 || tx < -10){\n      vision1.takeSnapshot(POLE);\n      double tx = vision1.largestObject.centerX - 150;\n     // Controller1.Screen.print(tx);\n      //Controller1.Screen.newLine();\n\n      //little math trick, [ abs(tx)/(tx * 10) * -1 ] returns if the pole is to the right or left (gives +1 or -1)\n      Motor393A.spin(reverse, abs(tx)/(tx * 10) * -1 * per, percent);\n      Motor393B.spin(forward, abs(tx)/(tx * 10) * -1 * per, percent);\n      vision1.takeSnapshot(POLE);\n\n      //error checking before drive over-rotates\n      tx = vision1.largestObject.centerX - 150;\n      if(tx<10&&tx>-10){\n        Motor393A.stop();\n        Motor393B.stop();\n        break;\n      }\n    }\n}\n\nvoid FullAlign(){\n   vision1.takeSnapshot(POLE);\n    while (vision1.largestObject.width>30 || vision1.largestObject.width < 25) {\n     /* bool xdev = false;\n      bool a = false;\n      for (int i = 0; i < 4; i++){\n      vision1.takeSnapshot(POLE);\n        if (vision1.largestObject.exists){\n          a = (vision1.largestObject.width > 30);\n        }\n        if (a != xdev){\n          if (a) {\n            xdev = a;\n          }\n        }\n      }\n      int dir = xdev\n      */\n      int dir = (vision1.largestObject.width > 30);\n      Motor393A.setVelocity(30 * dir, percent);\n      Motor393B.setVelocity(30 * dir, percent);\n      Motor393A.spin(reverse);\n      Motor393B.spin(reverse);\nvision1.takeSnapshot(POLE);\n    Controller1.Screen.print(vision1.largestObject.width);\n    Controller1.Screen.newLine();\n          }\n          Motor393A.stop();\n            Motor393B.stop();\n\n            double tx = vision1.largestObject.centerX - 150;\n           for (int i = 3; i>0; i--) {\n              Align();\n              wait(1, seconds);\n            }\n          \n}\n\nvoid DriveFW(double t){\n  Motor393A.spin(forward);\n  Motor393B.spin(forward);\n  wait(t,seconds);\n  Motor393A.stop();\n  Motor393B.stop();\n}\n\nint main() {\n\n   Motor1.setStopping(brake);\n  bool arcade = true;\n  \n  Motor1.spinToPosition(0,degrees);\n  while(0==0){\nvision1.takeSnapshot(POLE);\n    Controller1.Screen.print(vision1.largestObject.width);\n    Controller1.Screen.newLine();\n    if (Controller1.ButtonX.pressing()){\n      Motor1.setPosition(0, degrees);\n    }\n\n  if(Controller1.ButtonR1.pressing() && Motor1.position(degrees) < 215){\n    Motor1.spin(forward, 50, percent);\n\n  }\n  else if(Controller1.ButtonR2.pressing() && Motor1.position(degrees) > -547) {\n    Motor1.spin(reverse, 50, percent);\n  }\n  else if (Controller1.ButtonDown.pressing()){\n    Motor1.spinToPosition(-547, degrees);\n  }\n  else if (Controller1.ButtonLeft.pressing()){\n    Motor1.spinToPosition(-464, degrees);\n  }\n  else if (Controller1.ButtonUp.pressing()){\n    Motor1.spinToPosition(0, degrees);    \n  }\n  else if (Controller1.ButtonRight.pressing()){\n    Motor1.spinToPosition(215, degrees);    \n  }\n  else {\n    Motor1.stop();\n  }\n  /*\n  if(Motor1.position(degrees) > 800 || Motor1.position(degrees) < -35){\n    Motor1.stop();\n  }\n  */\n //Controller1.Screen.print(Motor1.position(degrees));\n //vision1.takeSnapshot(POLE);\n       //     double tx = vision1.largestObject.centerX-150;\n      //      Controller1.Screen.print(tx);\n   // Controller1.Screen.newLine();\n\n    if (!arcade){\n    if (Controller1.Axis3.position() > 5 || Controller1.Axis3.position() < -5) {\n      Motor393A.spin(forward, Controller1.Axis3.position(), percent);\n    }\n    else { \n      Motor393A.stop();\n    }\n    if (Controller1.Axis2.position() > 5 || Controller1.Axis2.position() < -5) {\n      Motor393B.spin(forward, Controller1.Axis2.position(), percent);\n    }\n     else { \n      Motor393B.stop();\n    }\n    if (Controller1.ButtonA.pressing()) {\n      arcade = true;\n    }\n    }\n    else {\n      if (Controller1.Axis3.position() > 10 || Controller1.Axis3.position() < -10) {\n      Motor393A.spin(forward, Controller1.Axis3.position(), percent);\n      Motor393B.spin(forward, Controller1.Axis3.position(), percent);\n      }\n      else {\n        Motor393A.stop();\n        Motor393B.stop();\n      }\n    \n    if (Controller1.Axis1.position() > 10 || Controller1.Axis1.position() < -10) {\n       Motor393A.spin(forward, Controller1.Axis1.position(), percent);\n      Motor393B.spin(reverse, Controller1.Axis1.position(), percent);\n    }\n   \n    if (Controller1.ButtonA.pressing()) {\n      arcade = false;\n    }\n    }\n\n      if (Controller1.ButtonB.pressing()) \n        {\n         Align();\n        }\n        if (Controller1.ButtonY.pressing()){\n         FullAlign();\n        }\n        if (Controller1.ButtonL1.pressing()){\n          FullAlign();\n          Motor1.spinToPosition(-464, degrees, true);\n          Brain.Screen.print(\"Aligned\");\n          double t = 0.45;\n          //DriveFW(t);\n         // wait(t,seconds);\n         Motor393A.setVelocity(50, percent);\n         Motor393B.setVelocity(50, percent);\n\n          Motor393A.spin(forward);\n  Motor393B.spin(forward);\n  wait(t,seconds);\n  Motor393A.stop();\n  Motor393B.stop();\n\n  \n          Motor1.spinToPosition(0, degrees); \n        }\n      \n\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Motor393A","customName":false,"deviceType":"Motor393","deviceClass":"motor29","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"Motor393B","customName":false,"deviceType":"Motor393","deviceClass":"motor29","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[2],"name":"Vision2","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":81,\"signatures\":[{\"name\":\"POLE\",\"parameters\":{\"uMin\":355,\"uMax\":639,\"uMean\":496,\"vMin\":-3865,\"vMax\":-3355,\"vMean\":-3610,\"rgb\":1,\"type\":0,\"name\":\"POLE\"},\"range\":2.6},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}